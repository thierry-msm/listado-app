// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  password       String
  lists          List[]         @relation("Owner")
  collaborations Collaboration[]
  purchasedItems Item[]         @relation("PurchasedItems") // Renomeado para evitar conflito
  createdAt      DateTime       @default(now())
  notifications  Notification[]
}

model List {
  id            String          @id @default(uuid())
  name          String
  description   String?
  ownerId       String
  owner         User            @relation("Owner", fields: [ownerId], references: [id])
  items         Item[]
  collaborations Collaboration[]
  createdAt     DateTime        @default(now())
}

model Item {
  id             String      @id @default(uuid())
  name           String
  quantity       Int
  priceLimit     Float?
  actualPrice    Float?      // Preço real pago
  purchased      Boolean     @default(false)
  purchasedBy    User?       @relation("PurchasedItems", fields: [purchasedById], references: [id])
  purchasedById  String?
  purchasedAt    DateTime?
  notes          String?     // Notas sobre o item
  category       String?     // Categoria do produto
  priority       Priority    @default(MEDIUM) // Prioridade
  deletedAt      DateTime?   // Soft delete
  list           List        @relation(fields: [listId], references: [id])
  listId         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([listId, purchased])
  @@index([category])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Collaboration {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  list      List     @relation(fields: [listId], references: [id])
  listId    String
  role      String   // 'admin' | 'collaborator'
  createdAt DateTime @default(now())

  @@unique([userId, listId]) // Garante que um usuário não colabore duas vezes na mesma lista
}

model Notification {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  read      Boolean        @default(false)
  metadata  Json?          // Dados adicionais
  createdAt DateTime       @default(now())
}

enum NotificationType {
  ITEM_PURCHASED
  ITEM_ADDED
  LIST_SHARED
  COLLABORATOR_JOINED
}